[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "business-acquisition-leads"
version = "2.0.0"
description = "Production-ready lead generation system for business acquisition"
authors = [{name = "Business Acquisition Team", email = "team@company.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "aiohttp>=3.9.0",
    "aiosqlite>=0.19.0",
    "pydantic>=2.5.0",
    "structlog>=23.2.0",
    "python-dotenv>=1.0.0",
    "pandas>=2.1.0",
    "gspread>=5.12.0",
    "oauth2client>=4.1.3",
    "beautifulsoup4>=4.12.0",
    "phonenumbers>=8.13.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
]

monitoring = [
    "psutil>=5.9.0",
    "redis>=5.0.0",
]

advanced = [
    "openai>=1.3.0",
    "selenium>=4.16.0",
]

[project.scripts]
run-pipeline = "scripts.run_pipeline:main"
export-leads = "scripts.export_results:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "gspread.*",
    "oauth2client.*",
    "structlog.*",
    "aiosqlite.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = "--strict-markers --strict-config --cov=src --cov-report=term-missing"
asyncio_mode = "auto"
markers = [
    "acceptance: Acceptance tests defining production readiness criteria",
    "integration: Integration tests for multi-component workflows",
    "unit: Unit tests for individual components"
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]